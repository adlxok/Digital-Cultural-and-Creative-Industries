{"remainingRequest":"D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\src\\views\\Home\\block\\index.vue?vue&type=template&id=1f7e4fda&scoped=true&","dependencies":[{"path":"D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\src\\views\\Home\\block\\index.vue","mtime":1721705238801},{"path":"D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1721705227172},{"path":"D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1721705237381},{"path":"D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1721705227172},{"path":"D:\\GitHubProject\\Digital-Cultural-and-Creative-Industries\\DigitalCulturalWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":1721705237380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}